@page "/detailread/{ID}/{chapterID}"
@layout LayoutRead
@using GreatLibrary.Components.Layout
@using GreatLibrary.Data
@implements IDisposable
@inject NavigationManager navigationManager
@inject IJSRuntime jsruntime

<div class="card card-style ms-0 me-0 rounded-0" style="height:@height.ToString()px; overflow:auto; margin-bottom:-20px">
    <div class="content" id="contentdetail">
        <div class="divider divider-margins"></div>
        <h2 id="chaptername">@ChapterName</h2>
        <p>
            @(((MarkupString)@Detail))
        </p>
    </div>
    <div class="divider-icon divider-margins bg-highlight mb-5"><i class="fa font-17 color-highlight bg-theme fa-times"></i></div>
    <nav aria-label="pagination-demo">
        <ul class="pagination pagination- justify-content-center">
            <li class="page-item">
                <a class="page-link rounded-l line-height-s color-white bg-gray-dark shadow-xl border-0" href="#" tabindex="-1" aria-disabled="true"><i class="fa fa-angle-left"></i></a>
            </li>

            <li class="page-item">
                <a class="page-link rounded-l line-height-s color-white bg-gray-dark shadow-xl border-0" @onclick="NextPage"><i class="fa fa-angle-right"></i></a>
            </li>
        </ul>
    </nav>
</div>

<script>
    // window.onscroll = function () { myFunction() };

    // function myFunction() {
    //     const elementparent = document.getElementById("pagecontent");
    //     const elementchild = document.getElementById("contentdetail");
    //     //if (elementparent.scrollTop> elementparent.scrollHeight)
    //     DotNet.invokeMethodAsync('GreatLibrary', 'HandleScroll', elementchild.scrollHeight);
    //     // if (element.scrollTop + 150 > element.scrollHeight)
    //     // // if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight)
    //     // {
    //     //     DotNet.invokeMethodAsync('GreatLibrary', 'HandleScroll', element.scrollTop);
    //     // }
    // }
    function scrolltotop() {
        document.getElementById("chaptername").scroll(0, 0);
    }
    function getHeight() {
        return window.innerHeight;
    }
</script>
@code {
    [Parameter]
    public string chapterID { get; set; }
    [Parameter]
    public string ID { get; set; }

    [CascadingParameter]
    public LayoutRead mainLayout { get; set; }
    private IDisposable registration;

    public string ChapterName { get; set; }
    public string TitleTruyen { get; set; }
    public string Alias { get; set; }
    public string Detail { get; set; }
    public string IDTruyen { get; set; }
    public List<Chapter> chapters { get; set; }
    public string PageChapter { get; set; }
    public string TotalchapterPageCount { get; set; }
    DB.API aPi = new DB.API();
    int height = 0;

    private async Task NextPage()
    {
        Chapter chap = await aPi.ChapterGet(new ChapterParamGet { ID = ID, ChapterID = "1" });
        ChapterName = chap.Name;
        Detail = chap.Detail;
        TitleTruyen = chap.TitleTruyen;
        Alias = chap.Alias;
        IDTruyen = ID;
        PageChapter = "1";
        TotalchapterPageCount = chap.TotalchapterPageCount;
        await jsruntime.InvokeVoidAsync("scrolltotop");
        await InvokeAsync(StateHasChanged);
       

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            height = await jsruntime.InvokeAsync<int>("getHeight");
            await InvokeAsync(StateHasChanged);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    private ValueTask LocationChangingHandler(LocationChangingContext arg)
    {
        Console.WriteLine("Location is changing...");
        if (arg.TargetLocation == "https://0.0.0.0/")
        {
            arg.PreventNavigation();
            // navigationManager.NavigateTo("/detail/" + ID);
        }
        return ValueTask.CompletedTask;
    }


    public void Dispose()
    {
        registration?.Dispose();
    }
    protected override async Task OnInitializedAsync()
    {
        Chapter chap = await aPi.ChapterGet(new ChapterParamGet { ID = ID, ChapterID = chapterID });
        ChapterName = chap.Name;
        Detail = chap.Detail;
        TitleTruyen = chap.TitleTruyen;
        Alias = chap.Alias;
        IDTruyen = ID;
        PageChapter = "1";
        TotalchapterPageCount = chap.TotalchapterPageCount;
        // mainLayout.chapterName = chap.Name;
        mainLayout.linkBack = "/detail/" + ID;
        await base.OnInitializedAsync();
    }
}
